"""
B457 Assignment 4
"""

__author__ = "Luke Doman"

# Imports
from math import sin,cos,radians
from matplotlib import *
import numpy as np
from PIL import Image
from pprint import pprint
from pylab import *
import random
import scipy.ndimage as ndi
from skimage import feature

def hough_transform(im, theta, d):
	"""	Performs Hough Tranform on passed image.

	Args:
		im (numpy array): Image to perform operation on
		theta (int): Max size of theta for bin
		d (int): Max size of d for bin

	Returns:
		Bin generated by transform
	"""
	canny_im = feature.canny(im)
	size_y = len(im)
	size_x = len(im[0])
	h_bin = np.zeros(shape=(d, theta), dtype = int)
	d_values = []

	for y in range (0, size_y):
		for x in range (0, size_x):
			if canny_im[y][x]:
				for t in range(0, theta):
					dist = (x * cos(radians(t))) + (y * sin(radians(t)))
					dist = abs(int(round(dist, 0)))
					d_values.append(dist)
					if dist < d:
						h_bin[dist, t] += 1

	#print d_values
	print max(d_values)
	return h_bin

# Problem 1.1 - canny edge detection
def p1_1():
	im = Image.open('line_original.png').convert('L')
	ar_im = array(im)

	# Compute the Canny filter for two values of sigma
	edges1 = feature.canny(ar_im)
	edges2 = feature.canny(ar_im, sigma=3)

	# display results
	fig, (ax1, ax2, ax3) = subplots(nrows=1, ncols=3, figsize=(8, 3),
		                                sharex=True, sharey=True)

	ax1.imshow(ar_im, cmap=plt.cm.gray)
	ax1.axis('off')
	ax1.set_title('Default image', fontsize=20)

	ax2.imshow(edges1, cmap=plt.cm.gray)
	ax2.axis('off')
	ax2.set_title('Canny filter, $\sigma=1$', fontsize=20)

	ax3.imshow(edges2, cmap=plt.cm.gray)
	ax3.axis('off')
	ax3.set_title('Canny filter, $\sigma=3$', fontsize=20)

	fig.tight_layout()

	show()

# Problem 1.2 - hough transform
def p1_2():
	im = Image.open('line_original.png').convert('L')
	ar_im = array(im)
	h_bin = hough_transform(ar_im, 360, 600)
	h_bin = ndi.rotate(h_bin, 90, mode='constant') # Displays better in landscape
	imshow(h_bin, cmap='gray')
	show()

# Problem 1.3 - hough transform with different bin size
def p1_3():
	im = Image.open('line_original.png').convert('L')
	ar_im = array(im)
	h_bin = hough_transform(ar_im, 120, 400)

	h_bin = ndi.rotate(h_bin, 90, mode='constant')
	imshow(h_bin, cmap='gray')
	show()

# Problem 1.4 - Find peaks in Hough Transform
def p1_4():
	im = Image.open('line_original.png').convert('L')
	ar_im = array(im)
	h_bin = hough_transform(ar_im, 120, 400)
	h_bin = ndi.rotate(h_bin, 90, mode='constant')
	
	coordinates = feature.peak_local_max(h_bin, min_distance=23)

	imshow(h_bin, cmap=plt.cm.gray)
	plot(coordinates[:, 1], coordinates[:, 0], 'r.')
	show()

# Problem 1
def p1():
	class1 = 2.0 * randn(100,2)
	class2 = randn(100,2) + array([5,5])
	class3 = randn(50,2) + array([5,0])
	features = vstack((class1,class2,class3))
	centroids,variance = kmeans(features,3)
	code,distance = vq(features,centroids)

	figure()
	ndx = where(code==0)[0]
	plot(features[ndx,0],features[ndx,1],'*')
	ndx = where(code==1)[0]
	plot(features[ndx,0],features[ndx,1],'r.')
	ndx = where(code==2)[0]
	plot(features[ndx,0],features[ndx,1],'g.')
	plot(centroids[:,0],centroids[:,1],'go')
	axis('off')
	show()

if __name__ == '__main__':
	#p1_1()
	#p1_2()
	#p1_3()
	p1_4()

